myftp 加强版：
v1.0: 2023/02/13

用消息队列的方式实现本地 ftp 的功能，从 server 取得文件然后转存到 /tmp/filename

创建守护进程的时候：fork 有 3 种可能的返回值，有两种情况需要退出处理，有一种要继续，这种情况怎么做判断
对两种退出处理的判断，然后需要继续的返回值继续执行。
如果对满足条件的做判断，那么程序就会一直套在 if 里面，会一直套下去。



这个程序中的守护进程：
setsid 后为什么向标准错误输出的数据仍然能在终端上显示？

当前进程是 bash 的子进程，默认打开了 0 1 2，当前进程 fork 子进程，子进程也同样打开了 0 1 2，调用 setsid 后，当前进程变成了后台进程，脱离了控制终端，但是 0 1 2 仍然是打开的，发送到标准错误的数据仍然能发送到 2.



如果一个缓冲区重复被使用的话，每次再使用前需要初始化！！！

2023.2.15 完成初版，功能基本跑通，还剩余以下几个问题：
1. client 发送 path 后 client 和 server 同时从消息队列里面读，怎么保证是server 读到的？
server指定了收path（msgrcv中指定mtype等于MSG_PATH），那么客户端要收取的数据只有data和eot，在客户端收包中指定只收这两种包。通过mtype绝对值的那个参数指定    OVER

2. 服务端进程应该是守护的，客户端如果传递的path不是合法的，那么server端的状态应该还是在recive_path，打印一条出错信息。
修改server端程序   OVER


3. 客户端包怎么知道收到的数据大小？在当前的程序中，数据直接通过字符串的形式打印出来，不用管长度，那么如果写到文件中怎么办呢？
利用len变量，这个变量表示数据的实际长度


还得考虑结构体的对齐问题：
typedef struct msg_data_st{
  long mtype;
  char data[DATA_MAX];
  int len;
}msg_data_t;



这个结构体的长度是 1024，long 8  char data 1024  len 4


2023.02.16程序调试一直有问题，可能是 msgsnd 和msgrcv用错了，中间的 size_t len不是消息结构的长度，应该是除去 mtype 的长度!!!!
